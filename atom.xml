<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[坐井观天]]></title>
  <link href="http://edwinmin.github.io/atom.xml" rel="self"/>
  <link href="http://edwinmin.github.io/"/>
  <updated>2014-04-10T18:15:32+08:00</updated>
  <id>http://edwinmin.github.io/</id>
  <author>
    <name><![CDATA[Edwin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guava]]></title>
    <link href="http://edwinmin.github.io/blog/2014/04/08/guava/"/>
    <updated>2014-04-08T11:53:15+08:00</updated>
    <id>http://edwinmin.github.io/blog/2014/04/08/guava</id>
    <content type="html"><![CDATA[<p>最近项目中使用到guava的cache部分，正好看到同事的github上有整理guava的使用，很详细，mark一下，方便以后查阅</p>

<p><a href="https://github.com/tiantiangao/guava-study">Guava详细介绍</a></p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步、异步、阻塞、非阻塞]]></title>
    <link href="http://edwinmin.github.io/blog/2014/04/04/tong-bu-%2C-yi-bu-%2C-zu-sai-%2C-fei-zu-sai/"/>
    <updated>2014-04-04T10:08:50+08:00</updated>
    <id>http://edwinmin.github.io/blog/2014/04/04/tong-bu-,-yi-bu-,-zu-sai-,-fei-zu-sai</id>
    <content type="html"><![CDATA[<h4>关键词</h4>

<pre><code>同步、异步、CPU中断、用户空间、内核空间、阻塞、非阻塞
</code></pre>

<p>同步和异步：同步和异步关注的是消息通信机制(syn communication/async communication),也就是程序等待消息时的状态。同步的情况下，是由处理消息者自己去等待消息是否被触发，而异步情况下是由触发机制(一般通过注册回调函数，当消息返回时调用回调函数)来通知处理消息者。</p>

<p>CPU中断：CPU执行某个程序的期间，由于系统发生了紧急需要处理的事件，CPU暂停执行当前程序，处理完紧急事件后返回原中断处继续执行，由于CPU切换非常高速，通常在微妙级别，所以很难察觉。由事件发起方主动发起一个中断请求信号。比如播放电影时，处理聊天事件。分为两大类：</p>

<!--more-->


<ul>
<li><p>硬件中断：分为可屏蔽中断、非屏蔽中断</p>

<p>可屏蔽中断通常由键盘、打印机等产生，当CPU需要处理其他紧急任务时，可以被软件屏蔽或忽略，X86中控制器为INTR</p>

<p>非可屏蔽中断由意外事件导致如断电、内存错误等，CPU无法屏蔽，必须响应，X86中控制器为NMI</p></li>
<li><p>软件中断：由程序调用INTR引起的</p></li>
</ul>


<p>内核空间、用户空间：linux中将高位1G虚拟地址空间给内核使用，称为“内核空间”，低位3G给应用进程使用，称为“用户空间”，内核空间被所有进程共享，用户空间中各进程空间是独立的。linux提供了两级保护机制：0级给内核，3级给用户。区分内核和用户的原因主要是为了保护内核资源。</p>

<p>内核与用户之间的桥梁是system call interface，当然一般不会直接通过call interface来访问，通常借住glib库来调用内核资源，glibc库属于用户空间，不被内核依赖。</p>

<p><a href="https://www.ibm.com/developerworks/cn/linux/l-netlink/">内核空间与用户空间通信设计实现和分析</a></p>

<p>阻塞block和非阻塞non-block其实描述的是进程或线程进行等待时的一种方式。</p>

<p>阻塞：在调用结果返回前，thread or processor需要挂起，会引起线程上下文切换，跟同步的区别在于，同步时线程或进程通常是执行状态，只不过一直在等待当前方法的返回，当前线程可以继续处理其他的事情</p>

<p>非阻塞：线程或进程不会挂起，立即返回，等到结果返回时通知该线程或进程获取结果。</p>

<p>linux下的5种I/O模型：</p>

<ul>
<li>阻塞I/O（blocking I/O）</li>
<li>非阻塞I/O （nonblocking I/O）</li>
<li>I/O复用(select 和poll) （I/O multiplexing）</li>
<li>信号驱动I/O （signal driven I/O (SIGIO)）</li>
<li>异步I/O （asynchronous I/O (the POSIX aio_functions)）</li>
</ul>


<p>上述概念都是为了理解linux中I/O过程准备的，具体I/O如何进行的，这里就不赘述了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建gitpages+octopress+markdown]]></title>
    <link href="http://edwinmin.github.io/blog/2014/03/31/da-jian-gitpages-plus-octopress-plus-markdown/"/>
    <updated>2014-03-31T22:12:50+08:00</updated>
    <id>http://edwinmin.github.io/blog/2014/03/31/da-jian-gitpages-plus-octopress-plus-markdown</id>
    <content type="html"><![CDATA[<h3>名词解释</h3>

<p>gitpages: github上的个人主页，除了个人主页外还有项目主页，在每个项目的gh-pages分之上，github默认会发布该分之</p>

<p>octopress: 简化blog的生成，发布markdown格式文件到edwinmin.github.io项目的master上，使程序员能专注于记录</p>

<p>markdown: 文本标记语言，比html更简洁</p>

<!--more-->


<h3>环境搭建</h3>

<p><a href="http://chensy0203.github.io/posts/hello-octopress.html">环境搭建详细文档</a></p>

<h3>遇到问题</h3>

<h4>bundle install安装错误</h4>

<p>安装过程如果出现错误，需要重新安装ruby,且需要用rvm安装最新版本</p>

<pre>
# 安装rvm
curl -L https://get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm
# 安装ruby最新版本
rvm install ruby --head
</pre>


<h4>rake deploy时无法push到master分支</h4>

<pre>
直接复制edwinmin.github.io项目的.git目录到/octopress/_deploy/下覆盖更新.git文件
</pre>

]]></content>
  </entry>
  
</feed>
